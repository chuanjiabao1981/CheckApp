has_secure_password 提供了2个基本功能
1. 验证用户输入密码是否正确 这个要使用方使用，主要在controller完成用户的权限控制
2. 用户密码确认功能。判断用户输入的密码password和确认密码password_confirmation是否匹配
   相比较功能1, 功能2"是半自动化", 在save和update的一个activerecord的时候,只有password password_confirmation相等才会成功。
   但是，如果此activerecord的password_confirmation为nil,则不会做password和password_confirmation是否匹配的检测。
   用户通过页面访问的话password_confirmation一定不是nil,至少是一个""。但是，用户通过如果自己构造以一个post请求，其中password_confirmation可以不设置,
   导致password_confirmation为nil，绕过这个check。 这个是没有问题的,因为能够提交的这个post请求，一定是被验证用户，一个验证用户，不管他怎么操作他也只能修改
   他自己的信息，无论是账户还是密码。

   tips:
   1. 当update用户信息的时候，如果用户提供的password和password_confirmation都是""的时候，并不会更新用户的密码
   2. 一个activerecord.password只要一修改，则authenticate就生效。注意，这里还未存入数据库

